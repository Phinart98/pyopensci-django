# Generated by Django 5.2.4 on 2025-09-14 00:49

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0002_delete_homepage'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('bio', models.TextField(blank=True, help_text='Short bio of the author')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='authors/')),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('website', models.URLField(blank=True)),
                ('github', models.CharField(blank=True, max_length=100)),
                ('linkedin', models.URLField(blank=True)),
                ('mastodon', models.CharField(blank=True, max_length=100)),
                ('discord', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
        ),
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('blogpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.blogpage')),
                ('start_date', models.DateField(help_text='Date when the event starts', verbose_name='Event start date')),
                ('end_date', models.DateField(blank=True, help_text='Date when the event ends (optional)', null=True, verbose_name='Event end date')),
                ('location', models.CharField(blank=True, help_text='Where the event takes place', max_length=255)),
                ('event_type', models.CharField(choices=[('workshop', 'Workshop'), ('webinar', 'Webinar'), ('conference', 'Conference'), ('meetup', 'Meetup'), ('other', 'Other')], default='other', help_text='Type of event', max_length=20)),
            ],
            options={
                'verbose_name': 'Event Page',
            },
            bases=('blog.blogpage',),
        ),
        migrations.RemoveField(
            model_name='blogpage',
            name='intro',
        ),
        migrations.AddField(
            model_name='blogpage',
            name='enable_comments',
            field=models.BooleanField(default=False, help_text='Show comments section on this post'),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='excerpt',
            field=models.TextField(blank=True, help_text='Brief description of the post', max_length=500),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='header_image',
            field=models.ImageField(blank=True, help_text='Featured image for the post', null=True, upload_to='blog/headers/'),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='header_image_alt',
            field=models.CharField(blank=True, help_text='Alt text for the header image', max_length=255),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='blogpage',
            name='date',
            field=models.DateField(help_text='Date when the post was published', verbose_name='Post date'),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_posts', to='blog.author'),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
